from __future__ import annotations

import asyncio
import json
import os
import time
from datetime import datetime
from pip._internal.cli.main import main
try:
    import aiosmtplib
except ImportError:
    main(["install", "-U", "aiosmtplib"])
    import aiosmtplib
import logging
from typing import TYPE_CHECKING, Dict, List, Tuple
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

from bs4 import BeautifulSoup

from FunPayAPI import Account

if TYPE_CHECKING:
    from cardinal import Cardinal
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


CONFIG_PATH = os.path.join("../storage", "cache", "auto_ticket.json")
os.makedirs(os.path.dirname(CONFIG_PATH), exist_ok=True)

LOGGER_PREFIX = "[AutoConfirmSup]"
logger = logging.getLogger("FPC.AutoConfirmSup")
logger.setLevel(logging.INFO)

import logging
import os

waiting_for_lots_upload = set()


LOG_DIR = os.path.join("../storage", "logs")
os.makedirs(LOG_DIR, exist_ok=True)
LOG_PATH = os.path.join(LOG_DIR, "AutoConfirmSup.log")


file_handler = logging.FileHandler(LOG_PATH, encoding='utf-8')
file_handler.setLevel(logging.ERROR)

formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)

logger.addHandler(file_handler)


bot = None
cardinal_ins = None

NAME = "AutoConfirmSup"
VERSION = "1.0"
DESCRIPTION = "–ü–ª–∞–≥–∏–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞."
CREDITS = "@KatsumiKamado"
UUID = "afc8e7cf-15d6-4b09-a128-9c51f91dfd42"
SETTINGS_PAGE = False

def load_config() -> Dict:
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (AutoConfirmSup.json)...")
    if os.path.exists(CONFIG_PATH):
        with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
            cfg = json.load(f)
        if "imap" not in cfg:
            cfg["imap"] = {
                "SMTP_SERVER": "smtp.gmail.com",
                "SMTP_PORT": 587,
                "EMAIL": "example@gmail.com",
                "PASSWORD": "1234 4567 8910 1234",
                "SUPPORT_EMAIL": "example@gmail.com",
            }
        save_config(cfg)
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        return cfg
    else:
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º.")
        default_config = {
            "imap": {
                "SMTP_SERVER": "smtp.gmail.com",
                "SMTP_PORT": 587,
                "EMAIL": "example@gmail.com",
                "PASSWORD": "1234 1234 1234 1234",
                "SUPPORT_EMAIL": "example@gmail.com",
            },
        }
        save_config(default_config)
        return default_config


def save_config(cfg: Dict):
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    os.makedirs(os.path.dirname(CONFIG_PATH), exist_ok=True)
    with open(CONFIG_PATH, 'w', encoding='utf-8') as f:
        json.dump(cfg, f, ensure_ascii=False, indent=4)
    logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")


def get_orders(acc: Account, start_from: str, subcs: dict, locale) -> tuple[str | None, list[str], str, dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ.

    :return: –°–ø–∏—Å–æ–∫ —Å –∑–∞–∫–∞–∑–∞–º–∏.
    """
    attempts = 3
    while attempts:
        try:
            result = acc.get_sales(start_from=start_from or None, state="paid", locale=locale, sudcategories=subcs)
            break
        except:
            attempts -= 1
            time.sleep(1)
    else:
        raise Exception
    orders = result[1]
    old_orders = []
    for i in orders:
        parser = BeautifulSoup(i.html, "lxml")

        time_text = parser.find("div", {"class": "tc-date-time"}).text
        if any(map(time_text.__contains__, ["—Å–µ–≥–æ–¥–Ω—è", "—Å—å–æ–≥–æ–¥–Ω—ñ", "today"])):
            continue
        if (datetime.now() - i.date).total_seconds() < 3600 * 24:
            continue
        old_orders.append(f"#{i.id}")
    return result[0], old_orders, result[2], result[3]


def get_all_old_orders(acc: Account) -> list[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ —Å—Ç–∞—Ä—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ.

    :param acc: —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–∫–∫–∞—É–Ω—Ç–∞.
    :return: —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤.
    """
    start_from = ""
    old_orders = []
    locale = None
    subcs = None
    while start_from is not None:
        result = get_orders(acc, start_from, subcs, locale)
        start_from = result[0]
        old_orders.extend(result[1])
        locale = result[2]
        subcs = result[3]
        time.sleep(1)
    return old_orders



async def send_email(orders):
    cfg = load_config()
    if "imap" not in cfg:
        return "–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–∏–≥."
    cfg = cfg["imap"]
    if "SMTP_SERVER" not in cfg:
        return
    if "SMTP_PORT" not in cfg:
        return
    if "EMAIL" not in cfg:
        return
    if "PASSWORD" not in cfg:
        return

    try:
        grouped_tags = [orders[i:i + 4] for i in range(0, len(orders), 4)]

        smtp_client = aiosmtplib.SMTP(
            hostname=cfg["SMTP_SERVER"],
            port=cfg["SMTP_PORT"],
            start_tls=True
        )
        await smtp_client.connect()
        await smtp_client.login(cfg["EMAIL"], cfg["PASSWORD"])

        count = 0
        for group in grouped_tags:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            msg = MIMEMultipart()
            msg["From"] = cfg["EMAIL"]
            msg["To"] = cfg["SUPPORT_EMAIL"]
            msg["Subject"] = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º"

            orders_line = ", ".join(group)
            body = (
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
                f"–ü—Ä–æ—à—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤: {orders_line}\n\n"
                "–ó–∞—Ä–∞–Ω–µ–µ –±–ª–∞–≥–æ–¥–∞—Ä—é,\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º."
            )
            msg.attach(MIMEText(body, "plain"))

            await smtp_client.send_message(msg)
            count += 1
            await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

        await smtp_client.quit()
        return 1, int(count)

    except aiosmtplib.errors.SMTPAuthenticationError:
        return "–ù–µ —Å–º–æ–≥ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ", 0
    except RuntimeError:
        return 0, 0


def ticket_settings(message: types.Message):
    cfg = load_config()
    if 'imap' not in cfg:
        return
    cfg = cfg['imap']
    if "SMTP_SERVER" not in cfg:
        return
    if "SMTP_PORT" not in cfg:
        return

    text = (f"<b>‚úâ –°–µ—Ä–≤–µ—Ä SMTP:</b> <code>{cfg['SMTP_SERVER']}:{cfg['SMTP_PORT']}</code>\n"
            f"üê¨ –ü–æ—á—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: <code>{cfg['EMAIL']}</code>\n"
            f"üîë –ü–∞—Ä–æ–ª—å –ø–æ—á—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: <tg-spoiler><code>{cfg['PASSWORD']}</code></tg-spoiler>\n"
            f"üë§ –ü–æ—á—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: <code>{cfg['SUPPORT_EMAIL']}</code>\n\n"
            f"<b><u>üîó –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ</u></b>")

    kb_ = InlineKeyboardMarkup(row_width=1)
    kb_.row(InlineKeyboardButton("‚úâ –°–µ—Ä–≤–µ—Ä SMTP", callback_data="change_SMTP"))
    kb_.row(InlineKeyboardButton("üê¨ –ü–æ—á—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è", callback_data="change_EMAIL"))
    kb_.row(InlineKeyboardButton("üîë –ü–∞—Ä–æ–ª—å –ø–æ—á—Ç—ã", callback_data="change_PASSWORD"))
    kb_.row(InlineKeyboardButton("üë§ –ü–æ—á—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data="change_SUPPORT"))

    bot.send_message(
        message.chat.id,
        text,
        parse_mode='HTML',
        reply_markup=kb_
    )

def open_settings(message: types.Message):
    kb_ = InlineKeyboardMarkup(row_width=1)
    kb_.row(InlineKeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="ticket_settings"))
    kb_.row(InlineKeyboardButton("üîó –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç—ã", callback_data="ticket_send"))

    bot.send_message(
        message.chat.id,
        "<b>üê¨ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ.</b>",
        parse_mode='HTML',
        reply_markup=kb_
    )


def send_mail(message: types.Message):
    acc = cardinal_ins.account
    try:
        new_mes = bot.reply_to(message, "–°–∫–∞–Ω–∏—Ä—É—é –∑–∞–∫–∞–∑—ã (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è)...")
        try:
            orders = get_all_old_orders(acc)
        except:
            logger.warning(f"{LOGGER_PREFIX} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            logger.debug("TRACEBACK", exc_info=True)
            bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤.", new_mes.chat.id, new_mes.id)
            return

        if not orders:
            bot.edit_message_text("‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.", new_mes.chat.id, new_mes.id)
            return
        response_, count = asyncio.run(send_email(orders))
        if response_ == 1:
            bot.send_message(message.chat.id, f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}</b>", parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, f"<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã. –û—Ç–≤–µ—Ç: <code>{response_}</code>  </b>",
                             parse_mode='HTML')
    except Exception as e:
        logger.error(e)


def process_smtp_change(message: types.Message):
    try:
        part1, sep, part2 = message.text.partition(":")
        if part1 == "" or part2 == "":
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ê–¥—Ä–µ—Å:–ü–æ—Ä—Ç")
            return
        cfg = load_config()
        cfg["imap"]["SMTP_SERVER"] = part1
        cfg["imap"]["SMTP_PORT"] = part2
        save_config(cfg)
        bot.send_message(message.chat.id, f"<b>‚úâ SMTP –°–µ—Ä–≤–µ—Ä –∏–∑–º–µ–Ω—ë–Ω!\nüîó –ê–¥—Ä–µ—Å: <code>{part1}</code>\n‚öô –ü–æ—Ä—Ç: <code>{part2}</code></b>", parse_mode='HTML')
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


def process_mail_change(message: types.Message):
    try:
        mail = str(message.text)
        cfg = load_config()
        cfg["imap"]["EMAIL"] = mail
        save_config(cfg)
        bot.send_message(message.chat.id, f"<b>üê¨ –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω!\nüîó –ê–¥—Ä–µ—Å:</b> <code>{mail}</code>", parse_mode='HTML')
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


def process_password_change(message: types.Message):
    try:
        password_ = str(message.text)
        cfg = load_config()
        cfg["imap"]["PASSWORD"] = password_
        save_config(cfg)
        bot.send_message(message.chat.id, f"<b>üîë –ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω—ë–Ω!\nüîó –ü–∞—Ä–æ–ª—å:</b> <code>{password_}</code>", parse_mode='HTML')
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


def process_mail_support_change(message: types.Message):
    try:
        mail_sup_ = str(message.text)
        cfg = load_config()
        cfg["imap"]["SUPPORT_EMAIL"] = mail_sup_
        save_config(cfg)
        bot.send_message(message.chat.id, f"<b>üë§ –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω!\nüîó –ê–¥—Ä–µ—Å:</b> <code>{mail_sup_}</code>", parse_mode='HTML')
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


def init_commands(c_: Cardinal):
    global bot, cardinal_ins
    cardinal_ins = c_
    bot = c_.telegram.bot

    cfg = load_config()

    c_.add_telegram_commands(UUID, [
        ("auto_ticket", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ —Ç–∏–∫–µ—Ç–∞", True),
    ])
    c_.telegram.msg_handler(open_settings, commands=["auto_ticket"])

    @bot.callback_query_handler(
        func=lambda call: (
                call.data in [
            "ticket_settings", "ticket_send",
            "change_SMTP", "change_EMAIL",
            "change_PASSWORD", "change_SUPPORT",
        ]))
    def handle_callback_query(call: types.CallbackQuery):
        bot.answer_callback_query(call.id)
        if call.data == "ticket_settings":
            ticket_settings(call.message)
            bot.delete_message(call.message.chat.id, call.message.message_id)
        elif call.data == "ticket_send":
            send_mail(call.message)
            bot.delete_message(call.message.chat.id, call.message.message_id)
        elif call.data == "change_SMTP":
            msg_ = bot.send_message(call.message.chat.id, "‚úâ <b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π SMTP –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ê–¥—Ä–µ—Å:–ü–æ—Ä—Ç</b>", parse_mode='HTML')
            bot.register_next_step_handler(msg_, process_smtp_change)
        elif call.data == "change_EMAIL":
            msg_ = bot.send_message(call.message.chat.id, "üê¨ <b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –ø–æ—á—Ç—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</b>",
                                    parse_mode='HTML')
            bot.register_next_step_handler(msg_, process_mail_change)
        elif call.data == "change_PASSWORD":
            msg_ = bot.send_message(call.message.chat.id, "üîë <b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</b>",
                                    parse_mode='HTML')
            bot.register_next_step_handler(msg_, process_password_change)
        elif call.data == "change_SUPPORT":
            msg_ = bot.send_message(call.message.chat.id, "üë§ <b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –ø–æ—á—Ç—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è</b>",
                                    parse_mode='HTML')
            bot.register_next_step_handler(msg_, process_mail_support_change)

BIND_TO_PRE_INIT = [init_commands]
BIND_TO_DELETE = None